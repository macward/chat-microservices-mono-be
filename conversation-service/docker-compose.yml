version: '3.8'

services:
  # Conversation Service
  conversation-service:
    build: .
    ports:
      - "8003:8003"
    environment:
      - MONGODB_URL=mongodb://mongodb:27017
      - MONGODB_DATABASE=conversation_service_dev
      - ENVIRONMENT=development
      - AUTH_SERVICE_PORT=8001
      - CHARACTERS_SERVICE_PORT=8002
    depends_on:
      - mongodb
      - prometheus
    volumes:
      - ./logs:/app/logs
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=conversation_service_dev
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - microservices
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - microservices
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - microservices
    restart: unless-stopped

  # Mock Auth Service (for development)
  mock-auth-service:
    image: nginx:alpine
    ports:
      - "8001:80"
    volumes:
      - ./scripts/mock-auth.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - microservices
    restart: unless-stopped

  # Mock Characters Service (for development)
  mock-characters-service:
    image: nginx:alpine
    ports:
      - "8002:80"
    volumes:
      - ./scripts/mock-characters.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - microservices
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  microservices:
    driver: bridge